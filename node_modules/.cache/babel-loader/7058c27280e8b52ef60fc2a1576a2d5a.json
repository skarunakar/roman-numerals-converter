{"ast":null,"code":"const INTEGER_LIST = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\nconst ROMAN_NUMERAL_LIST = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n\nconst findElement = integer => element => element <= integer;\n\nfunction toRoman(integer) {\n  const computedRomanNumeral = '';\n\n  while (integer > 0) {\n    const nextHighest = INTEGER_LIST.find(findElement(integer));\n    const romanNumeral = ROMAN_NUMERAL_LIST[INTEGER_LIST.indexOf(nextHighest)];\n    integer -= nextHighest;\n    computedRomanNumeral.concat(romanNumeral);\n  }\n\n  return computedRomanNumeral;\n}\n\nexport default toRoman;","map":{"version":3,"sources":["/Users/skarunakar/dev/roman-numerals-converter/src/utils/toRoman.js"],"names":["INTEGER_LIST","ROMAN_NUMERAL_LIST","findElement","integer","element","toRoman","computedRomanNumeral","nextHighest","find","romanNumeral","indexOf","concat"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,CAArB;AAEA,MAAMC,kBAAkB,GAAG,CACvB,GADuB,EAEvB,IAFuB,EAGvB,GAHuB,EAIvB,IAJuB,EAKvB,GALuB,EAMvB,IANuB,EAOvB,GAPuB,EAQvB,IARuB,EASvB,GATuB,EAUvB,IAVuB,EAWvB,GAXuB,EAYvB,IAZuB,EAavB,GAbuB,CAA3B;;AAgBA,MAAMC,WAAW,GAAGC,OAAO,IAAIC,OAAO,IAAIA,OAAO,IAAID,OAArD;;AAEA,SAASE,OAAT,CAAiBF,OAAjB,EAA0B;AACtB,QAAMG,oBAAoB,GAAG,EAA7B;;AACA,SAAOH,OAAO,GAAG,CAAjB,EAAoB;AAChB,UAAMI,WAAW,GAAGP,YAAY,CAACQ,IAAb,CAAkBN,WAAW,CAACC,OAAD,CAA7B,CAApB;AACA,UAAMM,YAAY,GAAGR,kBAAkB,CAACD,YAAY,CAACU,OAAb,CAAqBH,WAArB,CAAD,CAAvC;AACAJ,IAAAA,OAAO,IAAII,WAAX;AACAD,IAAAA,oBAAoB,CAACK,MAArB,CAA4BF,YAA5B;AACH;;AACD,SAAOH,oBAAP;AACH;;AAED,eAAeD,OAAf","sourcesContent":["const INTEGER_LIST = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\nconst ROMAN_NUMERAL_LIST = [\n    'M',\n    'CM',\n    'D',\n    'CD',\n    'C',\n    'XC',\n    'L',\n    'XL',\n    'X',\n    'IX',\n    'V',\n    'IV',\n    'I',\n];\n\nconst findElement = integer => element => element <= integer;\n\nfunction toRoman(integer) {\n    const computedRomanNumeral = '';\n    while (integer > 0) {\n        const nextHighest = INTEGER_LIST.find(findElement(integer));\n        const romanNumeral = ROMAN_NUMERAL_LIST[INTEGER_LIST.indexOf(nextHighest)];\n        integer -= nextHighest;\n        computedRomanNumeral.concat(romanNumeral);\n    }\n    return computedRomanNumeral;\n}\n\nexport default toRoman;"]},"metadata":{},"sourceType":"module"}