{"ast":null,"code":"const INTEGER_LIST = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\nconst ROMAN_NUMERAL_LIST = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n\nconst findElement = integer => element => element <= integer;\n\nfunction toRoman(inputToConvert) {\n  let integer = parseInt(inputToConvert);\n\n  if (integer === 0 || integer > 3999) {\n    return undefined;\n  }\n\n  let computedRomanNumeral = '';\n\n  while (integer > 0) {\n    const nextHighest = INTEGER_LIST.find(findElement(integer));\n    const romanNumeral = ROMAN_NUMERAL_LIST[INTEGER_LIST.indexOf(nextHighest)];\n    integer -= nextHighest;\n    computedRomanNumeral = computedRomanNumeral.concat(romanNumeral);\n  }\n\n  return computedRomanNumeral;\n}\n\nexport default toRoman;","map":{"version":3,"sources":["/Users/skarunakar/dev/roman-numerals-converter/src/utils/toRoman.js"],"names":["INTEGER_LIST","ROMAN_NUMERAL_LIST","findElement","integer","element","toRoman","inputToConvert","parseInt","undefined","computedRomanNumeral","nextHighest","find","romanNumeral","indexOf","concat"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,CAArB;AAEA,MAAMC,kBAAkB,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,EAA4B,IAA5B,EAAkC,GAAlC,EAAuC,IAAvC,EAA6C,GAA7C,EAAkD,IAAlD,EAAwD,GAAxD,EAA6D,IAA7D,EAAmE,GAAnE,CAA3B;;AAEA,MAAMC,WAAW,GAAGC,OAAO,IAAIC,OAAO,IAAIA,OAAO,IAAID,OAArD;;AAEA,SAASE,OAAT,CAAiBC,cAAjB,EAAiC;AAC7B,MAAIH,OAAO,GAAGI,QAAQ,CAACD,cAAD,CAAtB;;AACA,MAAIH,OAAO,KAAK,CAAZ,IAAiBA,OAAO,GAAG,IAA/B,EAAqC;AACjC,WAAOK,SAAP;AACH;;AACD,MAAIC,oBAAoB,GAAG,EAA3B;;AACA,SAAON,OAAO,GAAG,CAAjB,EAAoB;AAChB,UAAMO,WAAW,GAAGV,YAAY,CAACW,IAAb,CAAkBT,WAAW,CAACC,OAAD,CAA7B,CAApB;AACA,UAAMS,YAAY,GAAGX,kBAAkB,CAACD,YAAY,CAACa,OAAb,CAAqBH,WAArB,CAAD,CAAvC;AACAP,IAAAA,OAAO,IAAIO,WAAX;AACAD,IAAAA,oBAAoB,GAAGA,oBAAoB,CAACK,MAArB,CAA4BF,YAA5B,CAAvB;AACH;;AACD,SAAOH,oBAAP;AACH;;AAED,eAAeJ,OAAf","sourcesContent":["const INTEGER_LIST = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\nconst ROMAN_NUMERAL_LIST = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n\nconst findElement = integer => element => element <= integer;\n\nfunction toRoman(inputToConvert) {\n    let integer = parseInt(inputToConvert);\n    if (integer === 0 || integer > 3999) {\n        return undefined;\n    }\n    let computedRomanNumeral = '';\n    while (integer > 0) {\n        const nextHighest = INTEGER_LIST.find(findElement(integer));\n        const romanNumeral = ROMAN_NUMERAL_LIST[INTEGER_LIST.indexOf(nextHighest)];\n        integer -= nextHighest;\n        computedRomanNumeral = computedRomanNumeral.concat(romanNumeral);\n    }\n    return computedRomanNumeral;\n}\n\nexport default toRoman;"]},"metadata":{},"sourceType":"module"}