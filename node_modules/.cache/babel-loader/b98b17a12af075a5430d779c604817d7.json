{"ast":null,"code":"const ROMAN_INTEGER_MAP = {\n  'I': 1,\n  'V': 5,\n  'X': 10,\n  'L': 50,\n  'C': 100,\n  'D': 500,\n  'M': 1000\n};\n\nfunction fromRoman(romanNumeral = '') {\n  const romanNumeralSize = romanNumeral.length;\n  let computedInteger = ROMAN_INTEGER_MAP[romanNumeral.charAt(0)];\n  let prevComputed = computedInteger;\n\n  for (const i = 1; i < romanNumeralSize; i++) {\n    const integerEqv = map(s.charAt(i));\n\n    if (prevComputed < integerEqv) {\n      computedInteger = computedInteger - prevComputed - prevComputed;\n    }\n\n    computedInteger = computedInteger + cur;\n    prevComputed = cur;\n    i++;\n  }\n\n  return computedInteger;\n}\n\nexport default fromRoman;","map":{"version":3,"sources":["/Users/skarunakar/dev/roman-numerals-converter/src/utils/fromRoman.js"],"names":["ROMAN_INTEGER_MAP","fromRoman","romanNumeral","romanNumeralSize","length","computedInteger","charAt","prevComputed","i","integerEqv","map","s","cur"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG;AACtB,OAAK,CADiB;AAEtB,OAAK,CAFiB;AAGtB,OAAK,EAHiB;AAItB,OAAK,EAJiB;AAKtB,OAAK,GALiB;AAMtB,OAAK,GANiB;AAOtB,OAAK;AAPiB,CAA1B;;AAUA,SAASC,SAAT,CAAmBC,YAAY,GAAG,EAAlC,EAAsC;AAClC,QAAMC,gBAAgB,GAAGD,YAAY,CAACE,MAAtC;AACA,MAAIC,eAAe,GAAGL,iBAAiB,CAACE,YAAY,CAACI,MAAb,CAAoB,CAApB,CAAD,CAAvC;AACA,MAAIC,YAAY,GAAGF,eAAnB;;AACA,OAAK,MAAMG,CAAC,GAAG,CAAf,EAAkBA,CAAC,GAAGL,gBAAtB,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,UAAMC,UAAU,GAAGC,GAAG,CAACC,CAAC,CAACL,MAAF,CAASE,CAAT,CAAD,CAAtB;;AACA,QAAID,YAAY,GAAGE,UAAnB,EAA+B;AAC3BJ,MAAAA,eAAe,GAAGA,eAAe,GAAGE,YAAlB,GAAiCA,YAAnD;AACH;;AACDF,IAAAA,eAAe,GAAGA,eAAe,GAAGO,GAApC;AACAL,IAAAA,YAAY,GAAGK,GAAf;AACAJ,IAAAA,CAAC;AACJ;;AACD,SAAOH,eAAP;AACH;;AAED,eAAeJ,SAAf","sourcesContent":["const ROMAN_INTEGER_MAP = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000,\n};\n\nfunction fromRoman(romanNumeral = '') {\n    const romanNumeralSize = romanNumeral.length;\n    let computedInteger = ROMAN_INTEGER_MAP[romanNumeral.charAt(0)];\n    let prevComputed = computedInteger;\n    for (const i = 1; i < romanNumeralSize; i++) {\n        const integerEqv = map(s.charAt(i));\n        if (prevComputed < integerEqv) {\n            computedInteger = computedInteger - prevComputed - prevComputed;\n        }\n        computedInteger = computedInteger + cur;\n        prevComputed = cur;\n        i++;\n    }\n    return computedInteger;\n}\n\nexport default fromRoman;"]},"metadata":{},"sourceType":"module"}